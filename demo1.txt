-----> This is another notes from flow control.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
FLOW CONTROL:
===============
-->Flow control describes the order in which statements will be executed at runtime.

1.Conditional Statements:
	-->if
	-->if-else
	-->if-elif-else

2.Iterative Statements:
	-->for loop
	-->while loop

3.Transfer Statements:
	-->break
	-->continue
	-->pass


1.Conditional statements:
=======================
1).if:
		if condition:statement
or
		if condition:
			stmt-1
			stmt-2
			stmt-3

-->If condition is True then statements will be executed.

name = input('Enter Name:')
if name == 'sunny':
	print('Hello sunny good evening')
print('How r u?')

2).if -else:
----------------
	if condition:
		Action-1
	else:
		Action-2

-->If condition is True Action-1 will be executed otherwise Action-2 will be executed.

name = input('Enter Name:')
if name == 'sunny':
	print('Hello sunny good evening')
else:
	print('Hello guest good evening')
print('How r u?')
	
3).if-elif-else:
--------------------
	if condition-1:
		Action-1
	elif condition-2:
		Action-2
	elif condition-3:
		Action-3
	else:
		Default Action

-->Based on condition the corresponding action will be executed.

brand = input('Enter your favourite brand:')
if brand == 'RC':
	print('It is a childrens brand')
elif brand == 'KF':
	print('It is not that much kick')
elif brand == 'Boom Boom':
	print('Buy one get one free')
else:
	print('Other brands are not recommended')

Q.w.a.p to find biggest of 3-given numbers?
----------------------------------------------------------------
n1 = int(input('Enter First Number:'))
n2 = int(input('Enter Second Number:'))
n3 = int(input('Enter Third Number:'))
if n1 > n2 and n1 > n3:
	print('Biggest Number:',n1)
elif n2 > n3:
	print('Biggest Number:',n2)
else:
	print('Biggest Number:',n3)

Q.w.a.p to check whether the given number is in between 1-10?
----------------------------------------------------------------------------------------------
n = int(input('Enter Number:'))
if n >= 1 and n <= 10:
	print('The number',n,'is in between 1 to 10')
else:
	print('The number',n,'is not in between 1 to 10')



2).Iterative Statements:
-----------------------------------
-->If we want to execute a group of statements multiple times then we should go for iterative statements.
-->Python supports 2-types of iterative statements.
					-->for loop
					-->while loop
1.for loop:
---------------
-->If we want to execute some action for every element present in some sequence(It may be list,tuple or string or collection) then we should go for 'for loop'.

Syn:
	for x in sequence:
		body
		------
		------

Ex:To print the characters present in the given string.
----------------------------------------------------------------------------------
s = 'sunny leone'
for x in s:
	print(x)

Ex:To print chharacters present in string index wise.
-------------------------------------------------------------------------------
s = 'sunny leone'
i = 0
for x in s:
	print('The character present at',i,'index:',x)
	i += 1 

Ex:To print 'Hello' 10-times.
------------------------------------------
for i in range(10):
	print('Hello')

To print numbers from 0-9
----------------------------------------
for i in range(10):
	print(i)

To display odd numbers from 0-20
---------------------------------------------------
for i in range(21):
	if i%2 != 0:
		print(i)
or

for i in range(1,21,2):
	print(i)

To display numbers from 10-1
---------------------------------------------
for i in range(10,0,-1):
	print(i)

Ex:
n = int(input('Enter Number:'))#3
for i in range(1,11):
	print(i,'*',n,'=',i*n)


2).while loop:
-------------------
-->If we want to execute a group of statements iteratively until some condition False, then we should go for while loop.

Syn:
		while condition:
			body

Ex:To print numbers from 1 to 10 by using while loop
--------------------------------------------------------------------------------
x = 1
while x <= 10:
	print(x)
	x += 1

Ex:To display sum of first n numbers
-------------------------------------------------------
n = int(input('Enter Number:'))#10
sum = 0
i = 1
while i <= n:
	sum += i
	i += 1
print('The sum of the first',n,'numbers is:',sum)

Ex:w.a.p to prompt user to enter some name until entering 'sunny'
--------------------------------------------------------------------------------------------------
name = ''
while name != 'sunny':
	name = input('Enter Name:')
print('Thanks for confirmation')

Ex:w.a.p to prompt user to enter name & pwd until 'mahesh' & 'sunny'
---------------------------------------------------------------------------------------------------------
name = ''
pwd = ''
while name != 'mahesh' or pwd != 'sunny':
	name = input('Enter Correct Name:')
	pwd = input('Enter Correct Pwd:')
print('Thanks for confirmation')

Ex:
n = 6
while n>0:
	print(n)
	n -= 2 if n%3==0 else 1

-----------------------------------------------------------------------------
Infinite Loops:
----------------------
i = 0
while True:
	i += 1
	print('Hello',i)

Nested loops:
--------------------
Sometimes we can take a loop inside another loop, which are also known as nested loops.

for i in range(4):#0,1,2,3
	for j in range(3):#0,1,2
		print('i=',i,'j=',j)

3).Transfer Statements:
------------------------------------
1).break:
	We can use break statement inside loops to break loop execution based on some condition.

for i in range(10):
	if i == 3:
		print('Processing is enough plz break.....')
		break
	print(i)

Ex:
cart = [10,20,600,60,70]
for item in cart:
	if item > 500:
		print('To place this order insurance must be required')
		break
	print(item)

2).continue:
------------------
	To skip surrent iteration and continue next iteration.

for i in range(10):
	if i%2 == 0:
		continue
	print(i)

Ex:
cart = [10,20,600,30,40,700,60,70]
for item in cart:
	if item > 500:
		print("We can't process this item:",item)
		continue
	print(item)

Ex:
numbers = [10,20,0,5,0,25]
for n in numbers:
	if n == 0:
		print("We can't devide with zero....just skipping")
		continue
	print('100/{}={}'.format(n,100/n))

loops with else:
----------------------
Inside loop execution, if break statement not executed, then only else part will be executed.

cart = [10,20,30]
for item in cart:
	if item > 500:
		print("We can't process")
		break
	print(item)
else:
	print('Congrats.....all items processed successfully')

Q.What is difference between for loop and while?
------------------------------------------------------------------------
-->We can use loops to repeat code execution.
-->Repeat the code for every item in sequence==>for loop
-->Repeat the code as long as condition is True==>while loop

3).pass:
------------
-->In our programming syntactically if a block is required which wont do anything then we can define that empty block with pass keyword.

pass:
	-->It is an empty statement.
	-->It is null statement.
	-->It won't do anything.

Ex:
	if True:pass

	def f1():pass

Ex:
for i in range(100):
	if i%9 == 0:
		print(i)
	else:
		pass

del statement:
---------------------
-->del is a keyword in python.
-->After using a variable it is highly recommended to delete that variable if it is no longer required, so that the corresponding object is eligible for garbage collection. We can delete variable by using del statement.

Ex:
x = 10
print(x)
del x
print(x)#NameError: name 'x' is not defined

Ex:
s = 'sunny'
del s[0] #TypeError: 'str' object doesn't support item deletion

Note:
	We can delete variables which are pointing to immutable objects. But we cant delete the elements present inside the immutable objects.


************************************************************************STRING DATA TYPE**************************************************************************************************

'''
-----------------------------------------------------------------------STRING DATA TYPE ------------------------------------------------------------------------------------------------------
-------> What is a String?
* Any sequence of characters within either single quotes or double quoutes and triple quotes are called as String.
Example:
s = 'laptop'
s = "laptop"
single triple quote --> (''' ''')
double triple quote --> (""" """) 

Note : 
* Most of the other languages like c,c++ and java. A single character within character within a single quotes is treated as char data type value.
* But in python we are not having char data type. It is treated as string only.

'''

# How to access the characters of a string.
'''
1. By using index : 
* Python supports both positive and negative index.
* +ve index means left to right [forward direction]
* -ve index means right to left [backward direction]

s = 'sunny'
		s[0] #s
		s[-1] #y
		s[10] #IndexError
'''
# Basic program

s = 'sunny'
print(s[0])
print(s[-1])
print(s[10])

# 2. W.A.P to accept some string from the keyboard and display its characters by index wise both positive and negative

s = input("Enter a string: ")
i = 0
for x in s:
    print("The character present at +ve index {} and -ve index{} is {}".format(i,i-len(s),x))
    i += 1

# 3. By using slice operator:

s = "learning python is very easy"
print(s[1:7:1])
print(s[1:7])
print(s[:7])
print(s[:])
print(s[::])
print(s[::-1])

'''
1).If step is +ve:									2).If step is -ve:	
------------------------							------------------------		
-->Forward direction(left to right)					-->Backward direction(right to left)
-->Bydefault begin index is:0						-->Bydefault begin index:-1
-->Begin to End-1								    -->Begin to End+1

Note:
--------
-->In the backward direction if end value is -1 then result is always empty.
-->In the forward direction if end value is 0 then result is always empty.

'''

n = '0123456789'
print(n[2:8:1])
print(n[2:8:-1])
print(n[-1:-6:-1])
print(n[2:-5:1])
print(n[-5:0:-1])
print(n[:0:-1])
print(n[2:4:-6])

# Case study

s = 'abcdefghij'
print(s[1:6:2])
print(s[::1])
print(s[::-1])
print(s[::-2])
print(s[3:7:-1])
print(s[7:4:-1])
print(s[0:1000:1])
print(s[0:1000:2])
print(s[-4:1:-1])
print(s[-4:1:-2])
print(s[5:0:1])
# print(s[9:0:0])
print(s[0:-10:-1])
print(s[0:-11:-1])
print(s[0:-12:-1])
print(s[0:0:1])
# print(s[0:0:0])
print(s[0:-9:-2])
print(s[-5:-9:-2])
print(s[9:-1:-1])

# W.A.P to access each character of string in forward direction and backward direction by using while loop.

s = input("Enter a String: ")
i = 0
n = len(s)

print("-------Forward Direction---------")
while i<n:
    print(s[i],end='')
    i += 1
print()

print("-------Backward Direction---------")
i = -1
while i>=-n:
    print(s[i],end='')
    i -= 1
print()

print("-------Backward Direction---------")
i = n-1
while i>=0:
    print(s[i],end='')
    i -= 1

# Another Method by using loop.

s = input("Enter a string: ")
print("---------Forward Direction----------")
for i in s:
    print(i,end='')
print()

print("---------Forward Direction------------")
for i in s[::]:
    print(i,end='')
print()

print("---------Backward Direction----------")
for i in s[::-1]:
    print(i,end='')

'''
Checking membership:
----------------------------------
We can check whether the character or string is the member of another string or not by using in and not in operators.    
'''

# Example

s = input('Enter main string:')
subs = input('Enter sub string:')
if subs in s:
	print(subs,'is found in main string')
else:
	print(subs,'is not found in main string')

# Comparison of strings:
# Example:

s1 = input("Enter 1st String: ")
s2 = input("Enter 2nd String: ")

if s1==s2:
    print("Both are same")
elif s1<s2:
    print("First string is less than second string")
else:
    print("First string is greater than second string")

l1 = ['A','B','C']
l2 = ['A','B','C']
l3 = l2
print(l1 is l2)#False
print(l2 is l3)#True
print(l1 == l2)#True

'''
Removing spaces from the string:
--------------------------------------------------
1.rstrip():To remove spaces at right hand side.
2.lstrip():To remove spaces at left hand side.
3.strip():To remove spaces both sides.

'''

city = input('Enter Your City:')
scity = city.strip()
if scity == 'hyderabad':
	print('Hello Hyderabadi....gud mng')
elif scity == 'chennai':
	print('Hello Madrasi....Vanakkam')
elif scity == 'bangalore':
	print('Hello Kannadiga....Subhodaya')
else:
	print('Your enetered city is invalid')

'''
Finding substring:
----------------------------
For forward direction:
	-->find()
	-->index()

For backward direction:
	-->rfind()
	-->rindex()

1.find():
	s.find(substring):
		Returns index of the first occurence of the given substring. If it is not availbale we will get -1.

2.index():
	It is exactly same as find() method except that if the specified substring is not available then we will get ValueError.
    
Note:
	Bydefault find() method can search total string. We can also specify the boundaries to search.

'''

s = "learning python is very easy"
print(s.find('e'))
print(s.index('e'))
print(s.find('z'))
print(s.index('z'))
print(s.rfind('e'))
print(s.rindex('e'))
print(s.rfind('z'))
print(s.rindex('z'))
print(s.find('e'))#1
print(s.find('e',2,15))#-1
print(s.find('e',2,23))#20

# W.A.P to display all the positions of substring in a given string.

s = input("Enter a string: ")
subs = input("Enter a sub string: ")
pos = -1
n = len(s)

while True:
    pos = s.find(subs,pos+1,n)
    if pos == -1:
        break
    print("Found at position: ",pos)
    flag = True

if flag == False:
    print("Not Found")

'''
Counting substring in the given string
---------------------------------------------------------
We can find the number of occurances of substring present in the given string by using count() method.

1).count(substring)==>It will search through out the string.
2).s.count(substring,begin,end)==>It will search from begin index to end-1 index.
'''

s = 'abbbbbbbcbabbbcba'
print(s.count('a'))#3
print(s.count('a',1,8))#0
print(s.count('ab'))#2

'''
Splitting of string:
--------------------------
We can split the given string according to specified separator by using split() method.
Syn:
		l = s.split(separator)
Default separator is space. The return type of split() method is list.
'''

# Ex: 01
s = 'learning python is very easy'
l = s.split()
print(l)
for i in l:
	print(i)

# Ex: 02
s = '27-07-2024'
l = s.split('-')
print(l)
for i in l:
	print(i)

'''
joining of strings:
-------------------------
We can join a group of strings(list or tuple) w.r.t the given separator.
Syn:
		s = separator.join(group of strings)
'''

# Example : 

l = ('sunny' , 'bunny' , 'vinny' , 'cinny')
print('-'.join(l))
print(':'.join(l))

'''
Replacing a string with another string
---------------------------------------------------------
Syn:
		s.replace(oldstring,newstring)
-->Inside s, every occurance of old string will be replaced with new string.

s = 'learning python is difficult'
s1 = s.replace('difficult','easy')
print(s1)

Q.String objects are immutable then how we can change the content by using replace() method?
Once we creates string object, we cant change the content. This non changable behaviour is nothing but immutability. 
If we are trying to change the content by using any method, then with those changes a new object will be created and changes wont be happended in existing object.		
Hence with replace() method also a new object got created but existing object wont be changed.

'''
#  Example : 

s = 'abab'
s1 = s.replace('a','b')
print(s,'is available at:',id(s))
print(s1,'is available at:',id(s1))

# Changing cases in a string.

s = 'learning python is very easy'
print(s.lower())
print(s.upper())
print(s.capitalize())
print(s.title())
print(s.swapcase())

# Checking starting and ending part of the string.

s = 'learning python is very easy'
print(s.startswith('learning'))
print(s.endswith('learning'))
print(s.endswith('easy'))

'''
To check type of characters present in a string
----------------------------------------------------------------------
1).isalnum():Returns True if all the characters are alphanumeric(a-z,A-Z,0-9)
2).isalpha():Returns True if all the characters are only alphabate symbols(a-z,A-Z)
3).isdigit():Returns True if all the characters are digits only(0-9)
4).islower():Returns True if all the characters are lower case alphabate symbols.
5).isupper():Returns True if all the characters are upper case alphabet symbols.
6).istitle():Returns True if the string is in title case.
7).isspace():Returns True if string contains only spaces.
'''

print('sunny123'.isalnum())
print('sunny123'.isalpha())
print('sunny'.isalpha())
print('sunny'.isdigit())
print('786'.isdigit())
print('sunny'.islower())
print('sunny123'.islower())
print('SUNNY'.isupper())
print('Learning Python Is Very Easy'.istitle())
print(' '.isspace())

# Example

s = input("Enter any character: ")
if s.isalnum():
    print("It is a alpha numeric character")
    if s.isalpha():
        print("It is a alphabet character")
        if s.islower():
            print("It is a lower case alphabet character")
        else:
            print("It is a upper case alphabet character")
    else:
        print("It is a digit")
elif s.isspace():
    print("It is a space character")
else:
    print("It is a special character")

---------------------------------------------------------------------------------------------------LIST DATA STRUCTURE--------------------------------------------------------

'''
----> List:

* It is a ordered mutable collection of elements.
* It is denoted by [].
* Insertion order is preserved.
* Hetrogenious objects are allowed.
* Duplicate values are allowed.
* Growable in nature.
* Indexing and slicing supported.

------------------------------------------------or---------------------------------------------------

* It is one datatype.
* It represented by "[]".
* It is a mutable datatype.      "Mutable means changeable datatype."
* It stores different types of elements.
* It allows duplicates elements.
* It allows indexing.

Methods:
* append()
* extend()
* Remove()
* pop()
* count()
* index()

For slicing:
[start:stop:skip] ------> short name as s3

Ex: 
a = [1 , 2.2 , "True" , "Python"]
---------> Positive indexing[0,1,2,3]
Negative indexing<-----------------[-1,-2,-3,-4]

1. CREATION OF LIST : 
---------------------
a = []
print(type(a))
print(a)

2. ACCESSING THE ELEMENTS IN THE LIST:
---------------------------------------

a = [1,2,3,4,5]
print(a[0])
print(a[1])
print(a[-1])
print(a[100])
print(type(a))

3.  DYNAMIC INPUT : 
-------------------
a = eval(input("Enter the list: "))
print(a)
print(type(a))

4. RANGE WITH LIST : 
--------------------
a = list(range(1,11))
print(a)
print(type(a))

5. SPLIT() FUNCTION : 
---------------------
a = "Hello World"
b = a.split()
print(b)
print(type(b))

NOTE : Sometimes we can create list inside another list , such type of list called as nested list.
EXAMPLE : l=[10,20,30,40,[50,60]]
'''

'''
--------------------------------------------------------------------ACCESSING ELEMENTS OF LIST--------------------------------------------------------------
1.BY USING INDEX : 
-------------------
* List follows zero based index i.e index of first element is zero
* list supports both positive and negative indexing.
'''
# Example : 

# l = [10,20,30,40]
# print(l[0])
# print(l[1])
# print(l[-1])
# print(l[100])

'''
2. BY USING SLICE OPERATOR :
----------------------------
* We can access multiple elements of list by using slice operator.
* Syntax : list[start:stop:step]
* start : It is optional. Default value is 0.
* stop : It is mandatory. We have to specify the index from where we have to stop.
* step : It is optional. Default value is 1.
'''
# Example :

# l = [10,20,30,40,50,60,70,80,90]
# print(l[2:7:2])
# print(l[4:2])
# print(l[3:7])
# print(l[8:2:-1])
# print(l[4:100])

# Mutability : Once we create a list of object,we can modify its content. Hence list objects are mutable.

# Traversing : The sequential access of each element in the list is called as traversal.
# -------------------------------------------------------------------------------------------------------------------
# BY USING THE WHILE LOOP : 

# n = [0,1,2,3,4,5,6,7,8,9,10]
# i = 0
# while i<len(n):
#     print(n[i])
#     i += 1

#---------------------------------------------------------------------------------------------------------------------

# 2 BY USING FOR-LOOP: 

# l = ['A','B','C']
# n = len(l)
# for i in range(n):
#     print(l[i],'is available at positive index: ',i, 'and negative index: ',i-n)


'''
---------------------------------------------------------------------------FUNCTIONS------------------------------------------------------------------------

1. len() : Returns no.of elements present in the list.
2. count() : It returns the no.of occurance of specified item in the list.
3. index() : It returns index of the first occurance of the specified element.
4. append() : To add item at the end of the list.
5. insert() : To insert an item at specified index position.

NOTE : 
* If the specified index is greater than max index then element will be inserted at last position.
* If the specified index is smaller than min index then element will be inserted at first position.
'''