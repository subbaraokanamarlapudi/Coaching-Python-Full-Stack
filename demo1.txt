-----> This is another notes from flow control.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
FLOW CONTROL:
===============
-->Flow control describes the order in which statements will be executed at runtime.

1.Conditional Statements:
	-->if
	-->if-else
	-->if-elif-else

2.Iterative Statements:
	-->for loop
	-->while loop

3.Transfer Statements:
	-->break
	-->continue
	-->pass


1.Conditional statements:
=======================
1).if:
		if condition:statement
or
		if condition:
			stmt-1
			stmt-2
			stmt-3

-->If condition is True then statements will be executed.

name = input('Enter Name:')
if name == 'sunny':
	print('Hello sunny good evening')
print('How r u?')

2).if -else:
----------------
	if condition:
		Action-1
	else:
		Action-2

-->If condition is True Action-1 will be executed otherwise Action-2 will be executed.

name = input('Enter Name:')
if name == 'sunny':
	print('Hello sunny good evening')
else:
	print('Hello guest good evening')
print('How r u?')
	
3).if-elif-else:
--------------------
	if condition-1:
		Action-1
	elif condition-2:
		Action-2
	elif condition-3:
		Action-3
	else:
		Default Action

-->Based on condition the corresponding action will be executed.

brand = input('Enter your favourite brand:')
if brand == 'RC':
	print('It is a childrens brand')
elif brand == 'KF':
	print('It is not that much kick')
elif brand == 'Boom Boom':
	print('Buy one get one free')
else:
	print('Other brands are not recommended')

Q.w.a.p to find biggest of 3-given numbers?
----------------------------------------------------------------
n1 = int(input('Enter First Number:'))
n2 = int(input('Enter Second Number:'))
n3 = int(input('Enter Third Number:'))
if n1 > n2 and n1 > n3:
	print('Biggest Number:',n1)
elif n2 > n3:
	print('Biggest Number:',n2)
else:
	print('Biggest Number:',n3)

Q.w.a.p to check whether the given number is in between 1-10?
----------------------------------------------------------------------------------------------
n = int(input('Enter Number:'))
if n >= 1 and n <= 10:
	print('The number',n,'is in between 1 to 10')
else:
	print('The number',n,'is not in between 1 to 10')



2).Iterative Statements:
-----------------------------------
-->If we want to execute a group of statements multiple times then we should go for iterative statements.
-->Python supports 2-types of iterative statements.
					-->for loop
					-->while loop
1.for loop:
---------------
-->If we want to execute some action for every element present in some sequence(It may be list,tuple or string or collection) then we should go for 'for loop'.

Syn:
	for x in sequence:
		body
		------
		------

Ex:To print the characters present in the given string.
----------------------------------------------------------------------------------
s = 'sunny leone'
for x in s:
	print(x)

Ex:To print chharacters present in string index wise.
-------------------------------------------------------------------------------
s = 'sunny leone'
i = 0
for x in s:
	print('The character present at',i,'index:',x)
	i += 1 

Ex:To print 'Hello' 10-times.
------------------------------------------
for i in range(10):
	print('Hello')

To print numbers from 0-9
----------------------------------------
for i in range(10):
	print(i)

To display odd numbers from 0-20
---------------------------------------------------
for i in range(21):
	if i%2 != 0:
		print(i)
or

for i in range(1,21,2):
	print(i)

To display numbers from 10-1
---------------------------------------------
for i in range(10,0,-1):
	print(i)

Ex:
n = int(input('Enter Number:'))#3
for i in range(1,11):
	print(i,'*',n,'=',i*n)


2).while loop:
-------------------
-->If we want to execute a group of statements iteratively until some condition False, then we should go for while loop.

Syn:
		while condition:
			body

Ex:To print numbers from 1 to 10 by using while loop
--------------------------------------------------------------------------------
x = 1
while x <= 10:
	print(x)
	x += 1

Ex:To display sum of first n numbers
-------------------------------------------------------
n = int(input('Enter Number:'))#10
sum = 0
i = 1
while i <= n:
	sum += i
	i += 1
print('The sum of the first',n,'numbers is:',sum)

Ex:w.a.p to prompt user to enter some name until entering 'sunny'
--------------------------------------------------------------------------------------------------
name = ''
while name != 'sunny':
	name = input('Enter Name:')
print('Thanks for confirmation')

Ex:w.a.p to prompt user to enter name & pwd until 'mahesh' & 'sunny'
---------------------------------------------------------------------------------------------------------
name = ''
pwd = ''
while name != 'mahesh' or pwd != 'sunny':
	name = input('Enter Correct Name:')
	pwd = input('Enter Correct Pwd:')
print('Thanks for confirmation')

Ex:
n = 6
while n>0:
	print(n)
	n -= 2 if n%3==0 else 1

-----------------------------------------------------------------------------
Infinite Loops:
----------------------
i = 0
while True:
	i += 1
	print('Hello',i)

Nested loops:
--------------------
Sometimes we can take a loop inside another loop, which are also known as nested loops.

for i in range(4):#0,1,2,3
	for j in range(3):#0,1,2
		print('i=',i,'j=',j)

3).Transfer Statements:
------------------------------------
1).break:
	We can use break statement inside loops to break loop execution based on some condition.

for i in range(10):
	if i == 3:
		print('Processing is enough plz break.....')
		break
	print(i)

Ex:
cart = [10,20,600,60,70]
for item in cart:
	if item > 500:
		print('To place this order insurance must be required')
		break
	print(item)

2).continue:
------------------
	To skip surrent iteration and continue next iteration.

for i in range(10):
	if i%2 == 0:
		continue
	print(i)

Ex:
cart = [10,20,600,30,40,700,60,70]
for item in cart:
	if item > 500:
		print("We can't process this item:",item)
		continue
	print(item)

Ex:
numbers = [10,20,0,5,0,25]
for n in numbers:
	if n == 0:
		print("We can't devide with zero....just skipping")
		continue
	print('100/{}={}'.format(n,100/n))

loops with else:
----------------------
Inside loop execution, if break statement not executed, then only else part will be executed.

cart = [10,20,30]
for item in cart:
	if item > 500:
		print("We can't process")
		break
	print(item)
else:
	print('Congrats.....all items processed successfully')

Q.What is difference between for loop and while?
------------------------------------------------------------------------
-->We can use loops to repeat code execution.
-->Repeat the code for every item in sequence==>for loop
-->Repeat the code as long as condition is True==>while loop

3).pass:
------------
-->In our programming syntactically if a block is required which wont do anything then we can define that empty block with pass keyword.

pass:
	-->It is an empty statement.
	-->It is null statement.
	-->It won't do anything.

Ex:
	if True:pass

	def f1():pass

Ex:
for i in range(100):
	if i%9 == 0:
		print(i)
	else:
		pass

del statement:
---------------------
-->del is a keyword in python.
-->After using a variable it is highly recommended to delete that variable if it is no longer required, so that the corresponding object is eligible for garbage collection. We can delete variable by using del statement.

Ex:
x = 10
print(x)
del x
print(x)#NameError: name 'x' is not defined

Ex:
s = 'sunny'
del s[0] #TypeError: 'str' object doesn't support item deletion

Note:
	We can delete variables which are pointing to immutable objects. But we cant delete the elements present inside the immutable objects.


************************************************************************STRING DATA TYPE**************************************************************************************************

'''
-----------------------------------------------------------------------STRING DATA TYPE ------------------------------------------------------------------------------------------------------
-------> What is a String?
* Any sequence of characters within either single quotes or double quoutes and triple quotes are called as String.
Example:
s = 'laptop'
s = "laptop"
single triple quote --> (''' ''')
double triple quote --> (""" """) 

Note : 
* Most of the other languages like c,c++ and java. A single character within character within a single quotes is treated as char data type value.
* But in python we are not having char data type. It is treated as string only.

'''

# How to access the characters of a string.
'''
1. By using index : 
* Python supports both positive and negative index.
* +ve index means left to right [forward direction]
* -ve index means right to left [backward direction]

s = 'sunny'
		s[0] #s
		s[-1] #y
		s[10] #IndexError
'''
# Basic program

s = 'sunny'
print(s[0])
print(s[-1])
print(s[10])

# 2. W.A.P to accept some string from the keyboard and display its characters by index wise both positive and negative

s = input("Enter a string: ")
i = 0
for x in s:
    print("The character present at +ve index {} and -ve index{} is {}".format(i,i-len(s),x))
    i += 1

# 3. By using slice operator:

s = "learning python is very easy"
print(s[1:7:1])
print(s[1:7])
print(s[:7])
print(s[:])
print(s[::])
print(s[::-1])

'''
1).If step is +ve:									2).If step is -ve:	
------------------------							------------------------		
-->Forward direction(left to right)					-->Backward direction(right to left)
-->Bydefault begin index is:0						-->Bydefault begin index:-1
-->Begin to End-1								    -->Begin to End+1

Note:
--------
-->In the backward direction if end value is -1 then result is always empty.
-->In the forward direction if end value is 0 then result is always empty.

'''

n = '0123456789'
print(n[2:8:1])
print(n[2:8:-1])
print(n[-1:-6:-1])
print(n[2:-5:1])
print(n[-5:0:-1])
print(n[:0:-1])
print(n[2:4:-6])

# Case study

s = 'abcdefghij'
print(s[1:6:2])
print(s[::1])
print(s[::-1])
print(s[::-2])
print(s[3:7:-1])
print(s[7:4:-1])
print(s[0:1000:1])
print(s[0:1000:2])
print(s[-4:1:-1])
print(s[-4:1:-2])
print(s[5:0:1])
# print(s[9:0:0])
print(s[0:-10:-1])
print(s[0:-11:-1])
print(s[0:-12:-1])
print(s[0:0:1])
# print(s[0:0:0])
print(s[0:-9:-2])
print(s[-5:-9:-2])
print(s[9:-1:-1])

# W.A.P to access each character of string in forward direction and backward direction by using while loop.

s = input("Enter a String: ")
i = 0
n = len(s)

print("-------Forward Direction---------")
while i<n:
    print(s[i],end='')
    i += 1
print()

print("-------Backward Direction---------")
i = -1
while i>=-n:
    print(s[i],end='')
    i -= 1
print()

print("-------Backward Direction---------")
i = n-1
while i>=0:
    print(s[i],end='')
    i -= 1

# Another Method by using loop.

s = input("Enter a string: ")
print("---------Forward Direction----------")
for i in s:
    print(i,end='')
print()

print("---------Forward Direction------------")
for i in s[::]:
    print(i,end='')
print()

print("---------Backward Direction----------")
for i in s[::-1]:
    print(i,end='')

'''
Checking membership:
----------------------------------
We can check whether the character or string is the member of another string or not by using in and not in operators.    
'''

# Example

s = input('Enter main string:')
subs = input('Enter sub string:')
if subs in s:
	print(subs,'is found in main string')
else:
	print(subs,'is not found in main string')

# Comparison of strings:
# Example:

s1 = input("Enter 1st String: ")
s2 = input("Enter 2nd String: ")

if s1==s2:
    print("Both are same")
elif s1<s2:
    print("First string is less than second string")
else:
    print("First string is greater than second string")

l1 = ['A','B','C']
l2 = ['A','B','C']
l3 = l2
print(l1 is l2)#False
print(l2 is l3)#True
print(l1 == l2)#True

'''
Removing spaces from the string:
--------------------------------------------------
1.rstrip():To remove spaces at right hand side.
2.lstrip():To remove spaces at left hand side.
3.strip():To remove spaces both sides.

'''

city = input('Enter Your City:')
scity = city.strip()
if scity == 'hyderabad':
	print('Hello Hyderabadi....gud mng')
elif scity == 'chennai':
	print('Hello Madrasi....Vanakkam')
elif scity == 'bangalore':
	print('Hello Kannadiga....Subhodaya')
else:
	print('Your enetered city is invalid')

'''
Finding substring:
----------------------------
For forward direction:
	-->find()
	-->index()

For backward direction:
	-->rfind()
	-->rindex()

1.find():
	s.find(substring):
		Returns index of the first occurence of the given substring. If it is not availbale we will get -1.

2.index():
	It is exactly same as find() method except that if the specified substring is not available then we will get ValueError.
    
Note:
	Bydefault find() method can search total string. We can also specify the boundaries to search.

'''

s = "learning python is very easy"
print(s.find('e'))
print(s.index('e'))
print(s.find('z'))
print(s.index('z'))
print(s.rfind('e'))
print(s.rindex('e'))
print(s.rfind('z'))
print(s.rindex('z'))
print(s.find('e'))#1
print(s.find('e',2,15))#-1
print(s.find('e',2,23))#20

# W.A.P to display all the positions of substring in a given string.

s = input("Enter a string: ")
subs = input("Enter a sub string: ")
pos = -1
n = len(s)

while True:
    pos = s.find(subs,pos+1,n)
    if pos == -1:
        break
    print("Found at position: ",pos)
    flag = True

if flag == False:
    print("Not Found")

'''
Counting substring in the given string
---------------------------------------------------------
We can find the number of occurances of substring present in the given string by using count() method.

1).count(substring)==>It will search through out the string.
2).s.count(substring,begin,end)==>It will search from begin index to end-1 index.
'''

s = 'abbbbbbbcbabbbcba'
print(s.count('a'))#3
print(s.count('a',1,8))#0
print(s.count('ab'))#2

'''
Splitting of string:
--------------------------
We can split the given string according to specified separator by using split() method.
Syn:
		l = s.split(separator)
Default separator is space. The return type of split() method is list.
'''

# Ex: 01
s = 'learning python is very easy'
l = s.split()
print(l)
for i in l:
	print(i)

# Ex: 02
s = '27-07-2024'
l = s.split('-')
print(l)
for i in l:
	print(i)

'''
joining of strings:
-------------------------
We can join a group of strings(list or tuple) w.r.t the given separator.
Syn:
		s = separator.join(group of strings)
'''

# Example : 

l = ('sunny' , 'bunny' , 'vinny' , 'cinny')
print('-'.join(l))
print(':'.join(l))

'''
Replacing a string with another string
---------------------------------------------------------
Syn:
		s.replace(oldstring,newstring)
-->Inside s, every occurance of old string will be replaced with new string.

s = 'learning python is difficult'
s1 = s.replace('difficult','easy')
print(s1)

Q.String objects are immutable then how we can change the content by using replace() method?
Once we creates string object, we cant change the content. This non changable behaviour is nothing but immutability. 
If we are trying to change the content by using any method, then with those changes a new object will be created and changes wont be happended in existing object.		
Hence with replace() method also a new object got created but existing object wont be changed.

'''
#  Example : 

s = 'abab'
s1 = s.replace('a','b')
print(s,'is available at:',id(s))
print(s1,'is available at:',id(s1))

# Changing cases in a string.

s = 'learning python is very easy'
print(s.lower())
print(s.upper())
print(s.capitalize())
print(s.title())
print(s.swapcase())

# Checking starting and ending part of the string.

s = 'learning python is very easy'
print(s.startswith('learning'))
print(s.endswith('learning'))
print(s.endswith('easy'))

'''
To check type of characters present in a string
----------------------------------------------------------------------
1).isalnum():Returns True if all the characters are alphanumeric(a-z,A-Z,0-9)
2).isalpha():Returns True if all the characters are only alphabate symbols(a-z,A-Z)
3).isdigit():Returns True if all the characters are digits only(0-9)
4).islower():Returns True if all the characters are lower case alphabate symbols.
5).isupper():Returns True if all the characters are upper case alphabet symbols.
6).istitle():Returns True if the string is in title case.
7).isspace():Returns True if string contains only spaces.
'''

print('sunny123'.isalnum())
print('sunny123'.isalpha())
print('sunny'.isalpha())
print('sunny'.isdigit())
print('786'.isdigit())
print('sunny'.islower())
print('sunny123'.islower())
print('SUNNY'.isupper())
print('Learning Python Is Very Easy'.istitle())
print(' '.isspace())

# Example

s = input("Enter any character: ")
if s.isalnum():
    print("It is a alpha numeric character")
    if s.isalpha():
        print("It is a alphabet character")
        if s.islower():
            print("It is a lower case alphabet character")
        else:
            print("It is a upper case alphabet character")
    else:
        print("It is a digit")
elif s.isspace():
    print("It is a space character")
else:
    print("It is a special character")

---------------------------------------------------------------------------------------------------LIST DATA STRUCTURE--------------------------------------------------------

'''
----> List:

* It is a ordered mutable collection of elements.
* It is denoted by [].
* Insertion order is preserved.
* Hetrogenious objects are allowed.
* Duplicate values are allowed.
* Growable in nature.
* Indexing and slicing supported.

------------------------------------------------or---------------------------------------------------

* It is one datatype.
* It represented by "[]".
* It is a mutable datatype.      "Mutable means changeable datatype."
* It stores different types of elements.
* It allows duplicates elements.
* It allows indexing.

Methods:
* append()
* extend()
* Remove()
* pop()
* count()
* index()

For slicing:
[start:stop:skip] ------> short name as s3

Ex: 
a = [1 , 2.2 , "True" , "Python"]
---------> Positive indexing[0,1,2,3]
Negative indexing<-----------------[-1,-2,-3,-4]

1. CREATION OF LIST : 
---------------------
a = []
print(type(a))
print(a)

2. ACCESSING THE ELEMENTS IN THE LIST:
---------------------------------------

a = [1,2,3,4,5]
print(a[0])
print(a[1])
print(a[-1])
print(a[100])
print(type(a))

3.  DYNAMIC INPUT : 
-------------------
a = eval(input("Enter the list: "))
print(a)
print(type(a))

4. RANGE WITH LIST : 
--------------------
a = list(range(1,11))
print(a)
print(type(a))

5. SPLIT() FUNCTION : 
---------------------
a = "Hello World"
b = a.split()
print(b)
print(type(b))

NOTE : Sometimes we can create list inside another list , such type of list called as nested list.
EXAMPLE : l=[10,20,30,40,[50,60]]
'''

'''
--------------------------------------------------------------------ACCESSING ELEMENTS OF LIST--------------------------------------------------------------
1.BY USING INDEX : 
-------------------
* List follows zero based index i.e index of first element is zero
* list supports both positive and negative indexing.
'''
# Example : 

# l = [10,20,30,40]
# print(l[0])
# print(l[1])
# print(l[-1])
# print(l[100])

'''
2. BY USING SLICE OPERATOR :
----------------------------
* We can access multiple elements of list by using slice operator.
* Syntax : list[start:stop:step]
* start : It is optional. Default value is 0.
* stop : It is mandatory. We have to specify the index from where we have to stop.
* step : It is optional. Default value is 1.
'''
# Example :

# l = [10,20,30,40,50,60,70,80,90]
# print(l[2:7:2])
# print(l[4:2])
# print(l[3:7])
# print(l[8:2:-1])
# print(l[4:100])

# Mutability : Once we create a list of object,we can modify its content. Hence list objects are mutable.

# Traversing : The sequential access of each element in the list is called as traversal.
# -------------------------------------------------------------------------------------------------------------------
# BY USING THE WHILE LOOP : 

# n = [0,1,2,3,4,5,6,7,8,9,10]
# i = 0
# while i<len(n):
#     print(n[i])
#     i += 1

#---------------------------------------------------------------------------------------------------------------------

# 2 BY USING FOR-LOOP: 

# l = ['A','B','C']
# n = len(l)
# for i in range(n):
#     print(l[i],'is available at positive index: ',i, 'and negative index: ',i-n)


'''
---------------------------------------------------------------------------FUNCTIONS------------------------------------------------------------------------

1. len() : Returns no.of elements present in the list.
2. count() : It returns the no.of occurance of specified item in the list.
3. index() : It returns index of the first occurance of the specified element.
4. append() : To add item at the end of the list.
5. insert() : To insert an item at specified index position.

NOTE : 
* If the specified index is greater than max index then element will be inserted at last position.
* If the specified index is smaller than min index then element will be inserted at first position.

***** Difference between append() and insert()? ***********
* append() : It adds item at the end of the list. That will be the last element.
* insert() : It adds item at specified index position. That will be the first element.

6. extend() : To add all elements of one list to another list.
7. remove() : To remove specified item from the list. If the item present multiple times
              then only first occurance will be removed.
8. pop() : It removes and returns the last element of the list.
           If the list is empty then pop() function raises the indexError.

Note : 
* In general we can use append() and pop() function to implement stack data structure by using list , which follows LIFO[Last In First Out]
* n.pop(Index)===> To remove and return element present at specified index.
* n.pop()====> To remove and return last element of the list.

********** Difference between remove() and pop() ? ************************

POP : 
----
* To remove specified element from the list.
* It can't return any value.
* If the specified element not available we will get valueError.

REMOVE :
---------
* To remove last element from the list.
* It returned removed element
* If list is empty then we will get an error:IndexError

Note : 

* List objects dynamic, i.e based on our requirement we can increase and decrease the size.
* append(),insert(),extend()==>For increasing size/growable nature
* remove(),pop()==.For decreasing size/shrinking nature.
'''

# 1. len() : 

# n = [1,2,4,5,7,8,'sun','pen']
# print(len(n))

# 2. count() : 

# n = ['laptop' , 'python' , 100 , 10000 , True , 'laptop']
# print(n.count('laptop'))
# print(n.count(100))

# 3.index() : 

# n = ['laptop' , 'python' , 100 , 10000 , True , 'laptop']
# print(n.index('laptop'))
# print(n.index(100))

# 4.append() : 

# n = [10,20,30]
# n.append(50)
# n.append(100)
# print(n)

# To add all elements upto 100 which are divisible by 10.

# l = []
# for i in range(101):
#     if i%10 == 0:
#         l.append(i)
# print(l)

# 5.insert() : 

# n = [1,2,3,4]
# n.insert(1,100)
# n.insert(-100 , 111)
# n.insert(-10 , 111)
# print('n=',n)

# 6. extend() : 

# order1 = ['Chicken','Mutton','Fish']
# order2 = ['RC','KF','Boom Boom']
# order1.extend(order2)
# print(order1)

# Ex:
# order1 = ['Chicken','Mutton','Fish']
# order1.extend('Prawns')
# print(order1)

# 7. remove() :

# n = [10,20,30,10,20,10,20]
# n.remove(10)
# print(n)

# n = [10,20,30,10,20,10,20]
# n.remove(50)#ValueError: list.remove(x): x not in list

# l = [10,20,30,10,20]
# x = eval(input("Enter element to be removed: "))
# if x in l:
#     l.remove(x)
#     print("Removed successfully")
# else:
#     print("Element not found")

# 8. pop() : 

# l = [10,20,30,40]
# print(l.pop())#40
# print(l.pop())#30
# print(l)#[10,20]

# n = []
# print(n.pop())  # IndexError

# n = [10,20,1,2,30,40]
# print(n.pop())#40
# print(n.pop(1))#20
# print(n.pop(10))#IndexError: pop index out of range

# ------------------------------------------Ordering elements of the list ---------------------------------------------

# 1. reverse() : 
# ---------------
# n = [20,10,40,30]
# n.reverse()
# print(n)

# 2. sort() :
# ------------

'''
* For numbers ===> default sorting order is ascending order.
* For strings ===> default order is alphabatocal order.
'''

# Ex
# n = [20,10,40,30]
# n.sort()
# print(n)#[10,20,30,40]

# n = ['sunny','lilly','radhika']
# n.sort()
# print(n)#['lilly', 'radhika', 'sunny']

# n = [10,'A',20,'B']
# n.sort()  #'<' not supported between instances of 'str' and 'int'

# Descending order : 
# ------------------

# n = [10,40,30,20]
# n.sort()
# print(n)
# n.sort(reverse=True)
# print(n)
# n.sort(reverse=False)
# print(n)

'''
Aliasing and cloning of list objects:
-----------------------------------------------------
-->The process of giving another reference variable to the existing list is called as aliasing.
-->The problem in this approach is by using one reference variable if we are changing content, then those changes will be reflected to the other reference variable.
-->To overcome this problem we should go for cloning.
-->The process of creating exactly duplicate independent object is called as cloning.
-->We can implement cloning by using slice operator or by using copy() function.

1).By using slice operator					
2).By using copy() function

'='---> This is meant for the alising                   'copy'--------> It is meant fot the cloning.

************************************ Difference between shallow copy and deep copy **********************************
'''

# x = [10,20,30,40]
# y = x #Aliasing
# y[1] = 333
# print('x:',x)#[10,333,30,40]
# print('y:',y)#[10,333,30,40]

# By using slice operator : 

# x = [10,20,30,40]
# y = x
# y[1] = 333
# print('x:',x)
# print('y:',y)

# By using copy operator.

x = [10,20,30,40]
y = x.copy()
y[1] = 333
print('x:',x)
print('y:',y)

'''
Difference between shallow cloning and deep cloning.
-----------------------------------------------------

1.SHALLOE CLONING : 
-------------------
* It creates a new object,but inserts references into the objects found in the original.
* The new object is a different instance, any nested objects within it are still references to the same objects found in the original.
* Changes to nested objects affect both the original and the copy.

EX : 

import copy

original = [1, 2, [3, 4]]
shallow_copy = copy.copy(original)

print("Original:", original)
print("Shallow Copy:", shallow_copy)

shallow_copy[2][0] = 99
print("After modifying the nested list:")
print("Original:", original)
print("Shallow Copy:", shallow_copy)

2. DEEP CLONING :
-----------------
* It creates a new objects and recursively copies all objects found in the original.
* All nested objects are duplicated as well, resulting in a completely independent copy.
* Changes to nested objects do not affect the original and vice versa

EX : 

import copy

original = [1, 2, [3, 4]]
deep_copy = copy.deepcopy(original)

print("Original:", original)
print("Deep Copy:", deep_copy)

deep_copy[2][0] = 99
print("After modifying the nested list:")
print("Original:", original)
print("Deep Copy:", deep_copy)

'''

# Shallow copy

# import copy

# original = [1, 2, [3, 4]]
# shallow_copy = copy.copy(original)

# print("Original:", original)
# print("Shallow Copy:", shallow_copy)

# shallow_copy[2][0] = 99
# print("After modifying the nested list:")
# print("Original:", original)
# print("Shallow Copy:", shallow_copy)


# Deep copy

# import copy

# original = [1, 2, [3, 4]]
# deep_copy = copy.deepcopy(original)

# print("Original:", original)
# print("Deep Copy:", deep_copy)

# deep_copy[2][0] = 99
# print("After modifying the nested list:")
# print("Original:", original)
# print("Deep Copy:", deep_copy)


# using mathematical operators for list.

# 1. Concatentation : ----> We can use + to concatenate 2 list into a single list.

# a = [10,20,30]
# b = [40,50,60]
# c = a + b
# print(c)

# Ex : 

# a = [10,20,30]
# b = [40,50,60]
# c = a.extend(b)

# print('a',a)
# print('b',b)
# print('c',c)

# Note: To use + operator both args should be list objects, otherwise we will get an error.

# 2. Repetition : ----> We can use * operator to repeat elements of the list.

# x = [10,20,30]
# y = x * 3
# print(y)

# Comparing list objects:
# ----------------------------------

# Ex:
x = [50,40,30]
y = [10,20,30,40,50,60]
print(x < y)#False
print(x > y)#True

# Membership operators:
# 	-->in
# 	-->not in

# Nested Lists:
# -------------------
# * Sometimes we can take one list inside another list. Such type of lists are called as nested list.

# n = [10,20,30,[40,50]]
# print(n)
# print(n[0])
# print(n[1])
# print(n[3][0])
# print(n[3][1])

# Note : We can access nested list elements by using index just like accessing multi dimensional array of elements.

# Nested list as matrix:
# --------------------------------
# 	In python we can represent matrix by using nested list.

# n = [[10,20,30],[40,50,60],[70,80,90]]
# print(n)
# print('Elements by row wise:')
# for r in n:
# 	print(r)
# print('Elements by matrix style:')
# for i in range(len(n)):#0,1,2
# 	for j in range(len(n[i])):#0,1,2
# 		print(n[i][j],end=' ')
# 	print()

# List Comprehensions:
# ===================
# It is very easy way of creating list objects from any iterable objects based on some condition.
# Syn:
# 		l = [expression for i in sequence if condition]

# Ex:print first 10-number squares in list format.

# 1st-way

# l = []
# for i in range(1,11):
#     l.append(i*i)
# print(l)

# 2nd-way By using comprehension : 

# l = [i*i for i in range(1,11)]
# print(l)

# Even numbers and odd numbers.
# l = [i for i in range(1,11) if i%2==0]
# print("Even square numbers are : ", l)

# o = [i*i for i in range(1,11) if i%2 !=0]
# print("Odd square numbers are : ", o)

# Ex:
# word = 'the quick brown fox jums over the lazy dog'
# o/p:[['THE',3],['QUICK',5],['BROWN',5],......['DOG',3]]

# word = 'the quick brown fox jums over the lazy dog'
# words = word.split()
# l=[[w.upper(),len(w)] for w in words]
# print(l)

# w.a.p to display unique vowels present in the given string
# --------------------------------------------------------------------------------------
word = input('Enter the word to search for vowels:')
vowels = ['a','e','i','o','u']
found = [ ]
for letter in word:
	if letter in vowels:
		if letter not in found:
			found.append(letter)
print(found)


---------------------------------------------------------------- *****TUPLE DATA TYPE***** ---------------------------------------------------------------------------------

'''
---> Tuple:

* It is one of the datatype.
* It is represented by "()".
* It allows different types of elements.
* It allows duplicates.
* It allows indexing and slicing.
* It is immutable. -----> Data cannot modify.
* No methods. We can use in-bulit functions.

'''

# Tuple Creation : 

# 1. 
c = ()
print(type(c))

# 2. By using tuple() function

l = [10,20,30]
t = tuple(l)
t = tuple(range(5))
print(t)

# --------------------------Accessing element of tuple.------------------------------

# 1. By using index : 
t = (10,20,30)
t[0]
t[-1]
t[100]

# 2. By using slice operator : 
t = (10,20,30,40)
print(t[0:2])

# --------------------------Tuple vs Immutability------------------

# ----> Once we create tuple,we cant change its content.
# -----> Hence tuple objects are immutable.

t = (10,20,30)
print(t[100])    # TypeError.

# ------------------- Mathematical operations for tuple -----------------------

# 1. Concatenation operator(+):

t1 = (10,20,30)
t2 = (40,50,60)
t3 = t1+t2
print(t3)

# 2. Repetition operator(*):

t1 = (10,20,30)
t2 = t1*3
print(t2)

# ------------------- Functions in tuple ---------------------------------

'''
1.len():
	To return number of elements present in tuple.

2.count():
	To return number of occurences of given element in the tuple.

3.index():
	Returns index of first occurence of the given element.
	If the specified element is nor available then we will get ValueError.

4.sorted():
	To sort elements based on default natural sorting order.
'''

# 4. sorted()
t = (40,10,30,20)
t1 = tuple(sorted(t))
print(t1)

# 5. Min and Max : 

t = (40,10,20,50,30)
print(min(t))
print(max(t))

s = 'radhika'
print(min(s))
print(max(s))

# --------------Tuple packing and unpacking ------------------
# ---> We can create a tuple by using packing a group of variables.

#  Packing example in tuple : 

a = 10
b = 20
c = 30
t = a,b,c
print(t)

# ------> Here a,b,c,d are packed into a tuple t. This is nothing but tuple packing.

# Unpacking example in tuple :

# -->Tuple unpacking is the reverse process of tuple packing.
# -->We can unpack a tuple and assign its values to different variables.

t = (10,20,30,40)
a,b,c,d = t
print('A:',a)
print('B:',b)
print('C:',c)
print('D:',d)

# Note: At the time of tuple unpacking the number of variables and number of values should be same. Otherwise we will get an error.

# ---------------Tuple comprehensions----------------------
'''
Tuple Comprehensions:
-----------------------------------
Tuple comprehension is not supported by python.
Ex:
				t = (x*x for x in range(5))
-->Here we are not getting tuple object and we are getting generator object.

'''

x = (i*i for i in range(5))
print(type(x))#<class 'generator'>
for i in x:
	print(i)

# w.a.p to take tuple of numbers from the keyboard and print sum and average

t = eval(input('Enter tuple of numbers:'))
l = len(t)
sum = 0
for x in t:
	sum += x
print('The sum is:',sum)
print('The average is:',sum/l)

'''
Q.Difference between List and Tuple?
-------------------------------------------------------
			List											Tuple
			------											--------
1.List a group of comma separated values	1.Tuple is a group of comma separated
within the square brackets and square		values within the parenthesis, It is an
brackets are mandatory.							optional.
Ex:	l = [10,20,30]										Ex: t=(10,20,30) or t = 10,20,30

2.List objects are mutable. i.e once we		2.Tuple object is immutable. i.e once
create list object we can perform any			we create tuple object we can't change
changes in that object.								its content.

3.If the content is not fixed and keep on	3.If the content is fixed and never 
changing then we should go for list.			changes then we should go for tuple.

4.Comprehension are available.					4.There is no comprehensions.

'''

t = (5,10,15)
x,_,y = t
print(x,y)#5 15

# Q.
a = 1_2
b = a*2
b #24

# Q.
x,y = 4,3
z = (x--x) + (y--y)
print(z)#14

# Q.
a = 2
b = 3
a**b*a**b #64

# Q.
a = 4
b = 5
c = 8
print(a|b|c)#13

# Q.
print(min(max(False,-7.5,-7),2,1,9))

# Q.
text = 'hello world'
expr = ('d', 'rld')
result = text.endswith(expr)
print(result)

********************************************************************** SET DATA TYPE *********************************************************************************

'''
* It is a unordered and mutable collection of unique elements.
* It is denoted by {}
* Insertion order is preserved.
* Hetrogenious objects are allowed.
* Duplicates are not allowed.
* Doesnot perform Indexing and slicing.

'''

# Creation of set object:
# ---------------------------------
s = {10,20,30,40}
type(s)

l = [10,20,30]
s = set(l)
print(s)

s = set(range(5))
print(s)

s = {}
type(s) #<class 'dict'>

s = set()
type(s)

# -------------------------------------------------------------Functions of set-------------------------------------------
# -------------------------
# 1.add(x):
	# Add item x to the set.

s = {10,20,30}
s.add(40)
print(s)

# 2.update(x,y,z):
# 	-->To add multiple items to the set.
# 	-->Args are not individual elements and these are iterable elements like list, range etc.....
# 	-->All elements present in the given iterable objects will be added to the set.

s = {10,20,30}
l = [40,50,60]
s.update(l,range(5))
print(s)

# Q.What is difference between add() and update() functions in set?
# -------------------------------------------------------------------------------------------------
# -->We can use add() to add individual items to the set, where as we can use update() function to add multiple items to the set.
# -->add() function can take only one argument where as update() function can take any number of args but all args should be iterable objects.

# Q.Which are valid?
s.add(10)	#Valid
s.add(10,20) #Invalid
s.update(30) #Invalid
s.update(range(5)) #Valid

# 3.copy():
# 	Returns copy of the set
# 	It is cloned object.

s = {10,20,30}
s1 = s.copy()
print(s1)


# 4.pop():
# 	It removes and returns some random element from the set.

s = {20,10,40,30}
print(s.pop())
print(s)

# 5.remove(x):
# 	-->It removes specified element from the set.
# 	-->If the specified element not present in the set then we will get KeyError.

s = {10,20,30}
s.remove(10)
print(s)
s.remove(40)#KeyError: 40

# 6.discard(x):
# 	-->It removes specified element from the set.
# 	-->If the specified element not present in the set then we wont get any error.

s = {10,20,30}
s.discard(30)
s.discard(50)#No Error

# 7.clear():
# 	To remove all elements from the set.

s = {10,20,30}
s.clear()
print(s)

# Mathematical operations on the set:
# -------------------------------------------------------
# 1.union():
# 	x.union(y)		or		x | y:
# 		Returns all elements present in both sets

x = {10,20,30,40}
y = {30,40,50,60}
print(x.union(y))
print(x | y)

# 2.intersection():
# 	x.intersection(y)	or		x & y:
# 		Returns common elements present in both x and y.

x = {10,20,30,40}
y = {30,40,50,60}
print(x.intersection(y))
print(x & y)

# 3.difference():
# 	x.difference(y)	or		x - y:
# 		Returns the elements present in x but not in y.

x = {10,20,30,40}
y = {30,40,50,60}
print(x.difference(y))
print(x - y)
print(y.difference(x))
print(y - x)

# 4.symmetric_difference():
# 	x.symmetric_difference(y)		or		x ^ y
# 		Returns element present in either x or y but not in both.

x = {10,20,30,40}
y = {30,40,50,60}
print(x.symmetric_difference(y))#{10, 50, 20, 60}
print(x ^ y)#{10, 50, 20, 60}

# Set comprehensions:
# -------------------------------
# Set comprehensions is possible.

x = {i*i for i in range(5)}
print(type(x))
print(x)

# Q.w.a.p to eliminate duplicates present in the list
# ---------------------------------------------------------------------------
# 1st way:
# ------------
l = eval(input('Enter list of values'))
s = set(l)
print(s)

# 2nd way:
# -------------
l = eval(input('Enter list of values'))
l1 = [ ]
for x in l:
	if x not in l1:
		l1.append(x)
print(l1)

# Q.w.a.p to print different vowels in the given word?
# ----------------------------------------------------------------------------
w = input('Enter word to search for vowels:')
s = set(w)
v = {'a','e','i','o','u'}
d = s.intersection(v)
print('The different vowels present in',w,'are:',d)

# Q.
list = [1,0,2,0,3,0]
for i in list:
	if i == 0:
		list.remove(i)
		list.append(i)
print(list)#[1, 2, 3, 0, 0, 0]

# Q.
a = [1,2,3,4,5]
for i in a:
	a.remove(i)
print(a)#[2,4]

# Q.
a,b = '06'
b,c = '26'
print(a+b+c)#026