* In 1995, JS was created by a Netscape(Mozilla) developer named "Brendan Eich".
* Mocha-------->LiveScript---------->Javascript(1997-Present)
* Netscape first introduced a JS interpreter in navigator 2.
* Later JS became ECMA(Eurpean Computer Manufactures Associations) standards in 1997. ECMAScript is the official name of language.
* JS is implemented of ES. ES is the specification of JS.
* EX : RBI ==> SBI,HDFC,.....etc  -----> Customer    ES ===> JS -> Programmer 
* JS is a speed, lightweight, interoperability, extended functionality, dynamic , loosely typed, cross platform, free ware and open source
* speed ----> JS application runs faster than other
* lightweight ----> JS is a lightweight language.
* interoperability ----> JS is a interoperable language.
* extended functionality ----> JS is a extended functionality language.
* dynamic ----> JS is a dynamic language.
* loosely typed ----> JS is a loosely typed language.
* cross platform ----> JS is a cross platform.
* It is a single threaded Programmer.
* JS is a object based (or) prototype programming language.
* JS is a Client-side programming language. That means it executes on the browser.
* It can be also be used in server-side program.
* JS is a Case sensitive language. To work with JS we dont want to install any software. JS is interpreter language it is used to read line-by-line.


How many ways to implement JS?
--------------------------------
* We can implement the js in 3-ways
1.Inline Scripiting    ----> It is nothing but writing a code within the tag, by using even/dynamic attributes for this we need tag and event attributes.
2.Internal Scripting   ----> It is used to write the code in the head and body section of the html code.
3.External Scripting   ----> It is used to write the js code seperate file and link with the html file. In that seperate js file we should no write the html tags,css,no script tag.


Types of comments:
--------------------
* Single line comment  -----> "/ code /"
* Multi line comment   ------> "/* code */"

Object:
--------
* It is a instance of a class (copy of class).
* It is a collection of properties and methods.
* It is a interface.

Window:
--------
* It is a based object for all JS object. It is an object used for interacting with browser Window perform some operations.     

Document:
----------
* It is a sub object of the Window. It is a object used for interacting with web page/web documents to perform some operations.  Syn: window.document  (or) document.

Console:
---------
* It is a sub object of the window. It is a object used for interacting with browser Console to perform some operations.  Syn:  window.console  (or) console.


JS printing methods:
-----------------------

1.write() method:
--------------------
* The write() method writes HTML expressions (or) JS code to a document withoutline breaking  Syn: window.document.write(val1,val2........)

2.writeln() method:
--------------------
* The writeln() method writes HTML expressions (or) JS code to a document with line breaking  Syn: window.document.writeln(val1,val2........)

3.log() method:
--------------------
* The log() method writes HTML expressions (or) JS code to a document with line breaking  Syn: window.console.log(val1,val2........)

Note points:
-------------
* We can write JS code without html code. We can use only script tag.
* We can test the code in console. We dont need to create a file, write a code and run. It is used for instance checking.
* No need provide semicolon[optional] at the end of code.
* Sequence characters doesn't support in JS. <br> is support to display output is nextline.
* If we make any mistake in JS. The error will through out in console page.
* TypeError , ReferenceError , URIError , SyntaxError.

* SyntaxError: If we did any mistake while writing a code the entire script will be disabled (or) it shows the error in console page.
* Remaining errors nature is : If we write any mistake in JS code, that line and nextlines will not be disabled as output.

--------------------------------------------------------------- (or) -----------------------------------------------------------------------------------

You can write JavaScript code without HTML code, using only the <script> tag.

You can test the code in the browser console without needing to create a file, write the code, and run it. It is used for quick checks and debugging.

Providing a semicolon at the end of a statement in JavaScript is optional.

JavaScript does not support sequence characters like \n for newlines in output. However, <br> can be used to display output on a new line when rendering HTML.

If there is any mistake in the JavaScript code, errors will be shown in the console.

Common error types include: TypeError, ReferenceError, URIError, and SyntaxError.

Error Explanations:

SyntaxError: If there's a mistake in the syntax of the code, the entire script will be disabled or the error will be displayed in the console.
For the other error types (e.g., TypeError, ReferenceError), only the erroneous line and any dependent lines may not work, while the rest of the script can continue running.


single and double quotes:
----------------------------
* It is used to print the single line text.
* It is used to print text/string.
* It doesn't support the interpolation.
* It cannot provide the multiple lines of output

Template laterls:
--------------------
* It is used to print the single line text.
* It is used to print text/string.
* It supports the interpolation.
* It provide the 'n' no.of lines of output.

JS Reversed words:
--------------------
* These cannot be used as JS variables,functions,methods,loop labels or any object names.

Variables:
-----------
* Variables is a reference name of memory block.
* It is used to create (or) stored in RAM(stack area)
* Variables are used to store/to hold a value for reuse purpose and automatically substitute values.

* We can use variables in JS three ways. They are:
1. var
2. let
3. const
* var is a global scope variable. 
* let is a block scope variable.
* const is a block scope variable.
* let and const are the new version of JS (ES6).

Where do we declare variables:
----------------------------------
* We can declare variables in open script tag(global), within function(local) (or) within block level.

Rules:
--------
* Name should start with an alphabet (a-zA-Z), underscore(_) (or) $ sign.
* After first character we can use digits (0to9).
* Variables are case sensitive. For example: a and A are different variables.
* spaces are not allowed, means name should be a single word.
* special characters (symbols) are not allowed in name except "_ and $"

EX:

<script>
    var a;  // variable declaration
    document.writeln(a);

    a = 10; // assiging values
    document.writeln(a); 

    var b = 20;  // initilization
    document.writeln(b);

    let x;  // variable declaration
    document.writeln(x);

    x = 10;    // assiging
    document.writeln(x); 

    let y = 20;
    document.writeln(y);  //initilization

    const PI = 3.14;
    document.writeln(PI);
</script>


Loosely Typed:
----------------
Java script did not provide any data types for declaring variables and a variable in javascript can store any type of value. 
Hence java script is loosely typed.

dynamically typed:
--------------------
We can use a variable directly without declaring it in javascript, itâ€™s called dynamic typed programming.



Redefination and Hosting:
----------------------------
* var supports the hoisting and let doesn't suppport the hoisting.
* var supports Redefination and redecleartion and let doesn't support the Redefination and it supports the redecleartion.


<script>
        var n = 100
        document.write(n,'<br>')
    
        var n = 'Javascript'
        document.write(n,'<br>')
    
        var n = true
        document.write(n,'<br>')

        x = 100;
        document.write(x,'<br>')
        document.write(x>0,'<br>')
        var x;
    </script>


JavaScript DataTypes:
------------------------

* DataTypes supports primitive and non-primitive data types.

* primitive Data Type (PDT):
-------------------------------
* It allows storing data directly.
* It allows us store only one value.
* It is stack area.
* It is not shareable.
* PDT are also known as non-reference.
* pre-defined data type.

* string , number , boolean , undefined , null(object)

* Non primitive Data Types:
------------------------------
* It allows reference or address
* It allows to maintain 'N' values.
* It is heap area.
* It is shareable.
* NPT are also known as reference.

* object , array , function , date , regex , etc.

typeof --> It is one of reversed word, it is used to identify datatype of variable or value.
syntax : typeof var_name    ,      typeof value.


<script>
    var a = 100
    var b = 10.56
    let c = 'Ramu'
    let d = "R"
    const e = true
    var f
    let g = null

    document.write(a,'<br>')
    document.write(b,'<br>')
    document.write(c,'<br>')
    document.write(d,'<br>')
    document.write(e,'<br>')
    document.write(f,'<br>')
    document.write(g,'<br>')

    let st1 = new String('Javascript')
    let b1 = new Boolean(True)
    const d1 = new Date('30-aug-2024')

    document.write('st1',st,'<br>')
    document.write('b1',b1,'<br>')
    document.write('d1',d1,'<br>')
</script>

Javascript Operators:
------------------------
* operator is a special symbol (special char) and it is used to perform certain operations (task).
* Every operator is a symbol, but every symbol is not an operator.
* Every operator requires some values, those are called operands.

1. Unary Operator:
----------------------
* increment and decrement

2. Binary Operator:
----------------------
* arithmetic
* relational
* Logical
* assignment
* conditional

3. Ternary Operator:
------------------------
* it is a combination of two operators.
* It is a combination of two operands.


<script>
    // Assignment operator
    let x = 5; 
    let y = 10;
    document.write('sum',x+y,'<br>')
    document.write('sub',x-y,'<br>')
    document.write('mul',x*y,'<br>')
    document.write('div',x/y,'<br>')
    document.write('pow',x**y,'<br>')
    document.write('mod',x%y,'<br>')

    // Relational operator

    document.write(x>=0,'<br>')
    document.write(x>0,'<br>')
    document.write(x<=0,'<br>')
    document.write(x<0,'<br>')

    let z = '5'
    document.write(x==z,'<br>')
    document.write(x===z,'<br>')
    document.write(x!=z,'<br>')
    document.write(x!==z,'<br>')

    // Logical operator

    document.write(y>=1 && y<=10, '<br>')
    document.write(y>=1 || y<=10, '<br>')
    document.write(!(y>=1), '<br>')

    // Increment and Decrement operator
    let a = 10;
    document.write(a++, '<br>')
    document.write(a, '<br>')
    document.write(++a, '<br>')
    document.write(a, '<br>')
    document.write(a--, '<br>')
    document.write(a, '<br>')
    document.write(--a, '<br>')
    document.write(a, '<br>')

    // Assignment operator

    x += 40
    x -= 40
    x *= 40
    x /= 40
    x %= 40
    x **= 40
    document.write(x,'<br>')

    // Conditional operator
    let age = 18;
    let result = (age>=18) ? 'Eligible' : 'Not Eligible';
    document.write(result,'<br>')
</script>

JavaScript Dialogs:
----------------------
* alert : It is to display the message to the user -----> window.alert("Hello world");
* confirm : It is to take conformation from the user -----> window.confirm('Boi')
* prompt : It takes the input values from the user. -----> window.prompt('Sai charan')

Note : It doesn't support any html tag and operators.

<script>
    window.alert('Hello world')
    alert("hello boi")
    console.log('Hello world')
    alert("Product is: ",(10*20))

    let x = window.confirm('Are you student?')

    let a = prompt("Enter your age: ")
    document.write(a)
    document.write(n + ' ' + a + 'year(s) older')
</script>


Parsing:
---------
1. Auto Parsing:
------------------
* while using the following operators auto parsing applied. 
     - * / % ** ++ --

2. Exlicit Parsing:
----------------------
* using functions -> parseInt(), paresefloat()

window.pareseInt(data)
'10' -> 10
'10.56' -> 10
'Ramu' -> NaN

window.paresefloat(data)
'10' -> 10
'10.56' -> 10.56
'Ramu' -> NaN

* Example:
-----------

<script>
    let x = "15" , y = "9"
    // auto-parsing

    document.write(x-y)
    document.write(x*y)
    document.write(++x,'<br>')
    document.write(--y,'<br>')

    // Manual parsing

    let i = '12' , j = '8'
    let res = window.parseInt(i) + window.parseInt(j);
    document.write(res,'<br>');

    document.write(+i > +j, '<br>')
    document.write(+i < +j, '<br>')
    document.write(+'ram', '<br>')
</script>


Example : Addition of 2 numbers
------------------------------------

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Adding numbers</title>
</head>
<body>
    <h3>Addition of 2 numbers</h3>

    <label for="firstNum">Enter First Number</label><br>
    <input type="text" id="firstNum"><br>

    <label for="secondNum">Enter Second Number</label><br>
    <input type="text" id="secondNum"><br>

    <button onclick="addition()">Addition</button><br>
    <output id="op"></output>


    <script>
        function addition()
        {
            let x,y,res;  // local variables
            // data collection

            x = firstNum.value
            y = secondNum.value;
            res = +x + +y;

            // document.write('sum is:'+res)
            alert('sum is:'+res)
            op.value = 'sum is:' + res;
        }
    </script>
</body>
</html>

CONTROL STATEMENTS
-----------------------
* It is used to control (change) execution order of a program based on user input data.

Types:
--------
1. Conditional Statements:
---------------------------
* if
* if-else
* if-else-if
* switch

Examples:
----------
if : It is used to execute the given condition is true or false.
<h3>Demo on conditonal statements</h3>
<script>
    let n = +prompt("Enter any value")
    if(n<0){
        n = n*-1
    }
    document.write("Absolute value of the number is: "+n)
</script>

if-else : It is used to execute whether the condition is true it will execute the if block of code and it executes the else block of code.

<h3>Demo on conditonal statements</h3>
<script>
    let n = +prompt("Enter any value")

    if (n % 2 == 0) {
        document.write("Even")
    } else {
        document.write("Odd")
    }
</script>


if-else-if : It executes the multiple conditions are avaliable that block will execute otherwise else block will execute.

<h3>Demo on conditonal statements</h3>
<script>
    let x = +prompt("Enter any value"); // Getting value of x
    let y = +prompt("Enter any value"); // Getting value of y

    if (x > y) {
        console.log("x is greater than y: " + x); // Corrected 'X' to 'x'
    }
    else if (y > x) {
        console.log("x is less than y: " + y); // Corrected the concatenation
    }
    else {
        console.log("x is equal to y");
    }
</script>

switch : It a selection statement, but it is not decision making. It is better performance.
<h3>Demo on conditonal statements</h3>
<script>
    let x = +prompt("Enter any value");

    switch(x){
        case 1:
            document.write("sunday")
            break;
        
        case 2:
            document.write("Monday")
            break;

        case 3:
            document.write('Tuesday')
            break;

        case 4:
            document.write('Wednesday')
            break;
        
        case 5:
            document.write('Thursday')
            break;
        
        case 6:
            document.write('Friday')
            break;
        
        case 7:
            document.write('Saturday')
            break;

        default:
            document.write('Invalid input')
    }
</script>


Looping Statements:
-----------------------
* It is set of instructions given to the interpreter to execute untill the condition becomens false is called loops.
* The basic purpose of loop is minizie the code repetition.
* The way of repetition will be formating a circle that's why repetition Statements called loops.
* while-loop (top testing / entry level)
* for loop
* do-while (bottom testing / exit level)

while-loop (top testing / entry level)
----------------------------------------
<h3> Demo on Interation </h3>
<script>
    let i = 1
    while (i <= 10) {
        // console.log(i)
        document.write(i + "<br>")
        i++
    }

    let j = 0
    while (j <= 10) {
        // console.log(j)
        document.write(j + "<br>")
        //j += 2
        ++j
    }
</script>

for-loop:
----------

<h3> Demo on Iternations </h3>
<script>
for (let i=0; i<9; i++)
{
    document.write("The number is " + i + "<br>");
}

const imgs = []
for (let i=0; i<9; i++)
{
    document.writeln("<img src='images/'+imgs[i]+ width='150' height='150' title='' + imgs[i]+>");
}
</script>

do-while loop:
------------------

<h3> Demo on while loops </h3>
<script>
    document.write('<table>');
    document.write('<caption> Student Details </caption>');
    document.write('<tr> <th>Slno</th> <th>Name</th> <th>Course</th> <th>Contact Number</th></tr>')

    let i = 1;
    do{
        document.write(`<tr>
            <td>1</td>
            <td>Siva</td>
            <td>HTML</td>
            <td>77777</td>
            </tr>`)
        i++;
    }while(i<=10)
</script>

continue:
----------
* It is used to skip the some iterations and it is used only for the loops
<h3> Demo on continue </h3>
<script>
    let n = +prompt("Enter n value");
    
    for (let i = 1; i <= n; ++i) {
        if (i === 5 || i === 8 || i === 14) {
            continue; 
        }
        document.writeln(i + "<br>");  
    }
</script>

break:
-------
* When we apply break it terminated the loops of all iterations we can use loops,switch.

<h3> Demo on continue </h3>
<script>
    let n = +prompt("Enter n value");
    
    // for (let i = 1; i <= n; ++i) {
    //     if (i === 5 || i === 8 || i === 14) {
    //         continue; 
    //     }
    //     document.writeln(i + "<br>");  
    // }

    for (let i = 1; i <= n; ++i) {
        if (i%4 === 0) {
            break; 
        }
        document.writeln(i + "<br>");  
    }
</script>
